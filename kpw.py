import asyncio
import requests
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from datetime import datetime, timedelta
from googletrans import Translator
from config import TOKEN, NASA_API_KEY, THE_CAT_API_KEY
from buttoms import main_menu, facts_menu  # –ò–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫

bot = Bot(token=TOKEN)
dp = Dispatcher()
translator = Translator()

# –°–ª–æ–≤–∞—Ä—å –ø–æ—Ä–æ–¥
breeds_dict = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø–æ—Ä–æ–¥
def init_breeds_dict():
    url = 'https://api.thecatapi.com/v1/breeds'
    headers = {'x-api-key': THE_CAT_API_KEY}
    response = requests.get(url, headers=headers).json()
    for breed in response:
        breeds_dict[breed['name'].lower()] = {
            "id": breed['id'],
            "en": breed['name'],
            # "ru": translator.translate(breed['name'], src="en", dest="ru").text,
            "description": translator.translate(breed['description'], src="en", dest="ru").text,
            "temperament": translator.translate(breed['temperament'], src="en", dest="ru").text,
        }
    print("–°–ª–æ–≤–∞—Ä—å –ø–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# NASA APOD
def get_random_apod():
    random_date = (datetime.now() - timedelta(days=random.randint(0, 365))).strftime('%Y-%m-%d')
    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={random_date}'
    response = requests.get(url).json()
    return response

# –§–∞–∫—Ç—ã –∏–∑ Numbers API
def fetch_fact(category, query=""):
    url = f"http://numbersapi.com/{query}/{category}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def translate_to_russian(text):
    try:
        return translator.translate(text, src="en", dest="ru").text
    except Exception:
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
user_facts_state = {}

@dp.message(CommandStart())
async def start(message: types.Message):
    init_breeds_dict()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.message(lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥")
async def list_breeds(message: types.Message):
    breed_list = "\n".join([f"{breed['en']}" for breed in breeds_dict.values()])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤:\n\n{breed_list}")

@dp.message(lambda message: message.text == "üêæ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É")
async def prompt_breed_input(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")

@dp.message(lambda message: message.text == "üöÄ –ö–æ—Å–º–æ—Å")
async def send_random_apod(message: types.Message):
    apod = get_random_apod()
    photo_url = apod.get('url', '')
    title = apod.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = apod.get('explanation', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

    # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    translated_title = translate_to_russian(title)
    translated_description = translate_to_russian(description)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if len(translated_description) > 900:
        translated_description = translated_description[:900] + "..."

    caption = f"{translated_title}\n\n{translated_description}"

    await message.answer_photo(photo_url, caption=caption)

@dp.message(lambda message: message.text == "–§–∞–∫—Ç—ã")
async def facts_menu_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–∫—Ç–∞:", reply_markup=facts_menu())

@dp.message(lambda message: message.text in ["–§–∞–∫—Ç –æ —á–∏—Å–ª–µ", "–§–∞–∫—Ç –æ –¥–∞—Ç–µ", "–§–∞–∫—Ç –æ –≥–æ–¥–µ", "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"])
async def handle_fact_request(message: types.Message):
    user_id = message.from_user.id
    if message.text == "–§–∞–∫—Ç –æ —á–∏—Å–ª–µ":
        user_facts_state[user_id] = "number"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    elif message.text == "–§–∞–∫—Ç –æ –¥–∞—Ç–µ":
        user_facts_state[user_id] = "date"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11-14):")
    elif message.text == "–§–∞–∫—Ç –æ –≥–æ–¥–µ":
        user_facts_state[user_id] = "year"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):")
    elif message.text == "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç":
        fact = fetch_fact("random")
        await message.answer(f"–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n{translate_to_russian(fact)}")
        user_facts_state.pop(user_id, None)

@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message(lambda message: message.from_user.id in user_facts_state)
async def process_fact_input(message: types.Message):
    user_id = message.from_user.id
    fact_type = user_facts_state.get(user_id)
    fact = None

    if fact_type == "number":
        if message.text.isdigit():
            fact = fetch_fact("trivia", message.text)
    elif fact_type == "date" and "-" in message.text:
        fact = fetch_fact("date", message.text)
    elif fact_type == "year" and message.text.isdigit():
        fact = fetch_fact("year", message.text)

    if fact:
        await message.answer(f"–§–∞–∫—Ç:\n{translate_to_russian(fact)}")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    user_facts_state.pop(user_id, None)

@dp.message(lambda message: True)
async def handle_breed_input(message: types.Message):
    breed_name = message.text.strip().lower()
    breed_info = breeds_dict.get(breed_name)
    if breed_info:
        url = f"https://api.thecatapi.com/v1/images/search?breed_ids={breed_info['id']}"
        response = requests.get(url).json()
        image_url = response[0].get('url', '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è') if response else "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        info = (
            f"–ü–æ—Ä–æ–¥–∞: {breed_info['en']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {breed_info['description']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {breed_info['temperament']}"
        )
        await message.answer_photo(image_url, caption=info)
    else:
        await message.answer("–ö–æ—Ç —Å —Ç–∞–∫–æ–π –ø–æ—Ä–æ–¥–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    init_breeds_dict()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
