import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import random
import requests
from datetime import datetime, timedelta
from config import TOKEN, NASA_API_KEY, THE_CAT_API_KEY
from googletrans import Translator

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö URL –¥–ª—è NASA APOD
used_urls = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥"), KeyboardButton(text="üêæ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É")],
            [KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç"), KeyboardButton(text="üöÄ –ö–æ—Å–º–æ—Å")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ NASA APOD
def get_random_apod():
    global used_urls
    end_date = datetime.now()
    start_date = datetime.now() - timedelta(days=365)

    while True:
        random_days = random.randint(0, 365)
        random_date = start_date + timedelta(days=random_days)
        date_str = random_date.strftime('%Y-%m-%d')

        url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}'
        response = requests.get(url).json()

        if response['url'] not in used_urls:
            used_urls.add(response['url'])
            return response

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤
def get_cat_breeds():
    url = 'https://api.thecatapi.com/v1/breeds'
    headers = {'x-api-key': THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    return response.json()

# –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ –ø–æ –ø–æ—Ä–æ–¥–µ
def get_cat_image_by_breed(breed_id):
    url = f'https://api.thecatapi.com/v1/images/search?breed_ids={breed_id}'
    headers = {'x-api-key': THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    data = response.json()
    return data[0]['url']

# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ
def get_breed_info(breed_name):
    breeds = get_cat_breeds()
    for breed in breeds:
        if breed_name.lower() in (breed['name'].lower(), breed.get('alt_names', '').lower()):
            return breed
    return None

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥")
async def list_breeds(message: Message):
    breeds = get_cat_breeds()
    breed_list = "\n".join([f"{breed['name']} / {translator.translate(breed['name'], src='en', dest='ru').text}" for breed in breeds])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤:\n\n{breed_list}")

@dp.message(lambda message: message.text == "üêæ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É")
async def prompt_breed_input(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")

@dp.message(lambda message: message.text not in ["üìú –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥", "üêæ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É", "üîÑ –°—Ç–∞—Ä—Ç", "üöÄ –ö–æ—Å–º–æ—Å"])
async def send_cat_info(message: Message):
    breed_name = message.text
    breed_info = get_breed_info(breed_name)
    if breed_info:
        cat_image_url = get_cat_image_by_breed(breed_info['id'])
        description_ru = translator.translate(breed_info['description'], src='en', dest='ru').text
        temperament_ru = translator.translate(breed_info['temperament'], src='en', dest='ru').text
        info = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã: {breed_info['name']} / {translator.translate(breed_info['name'], src='en', dest='ru').text}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description_ru}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {breed_info['life_span']} –ª–µ—Ç\n"
            f"–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {temperament_ru}\n"
        )
        await message.answer_photo(cat_image_url, caption=info)
    else:
        await message.answer("–ö–æ—Ç —Å —Ç–∞–∫–æ–π –ø–æ—Ä–æ–¥–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(lambda message: message.text == "üöÄ –ö–æ—Å–º–æ—Å")
async def send_random_apod(message: Message):
    apod = get_random_apod()
    photo_url = apod.get('url', '')
    title = apod.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    translated_title = translator.translate(title, src='en', dest='ru').text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
    await message.answer_photo(photo_url, caption=f"{translated_title}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
